#compdef pacman pacman.static=pacman pacman-key makepkg

# copy this file to /usr/share/zsh/site-functions/_pacman

typeset -A opt_args

# options for passing to _arguments: main pacman commands
_pacman_opts_commands=(
	'-Q[Query the package database]'
	'-R[Remove a package from the system]'
	'-S[Synchronize packages]'
	'-U[Upgrade a package]'
	'-V[Display version and exit]'
	'-h[Display usage]'
)

# options for passing to _arguments: options common to all commands
_pacman_opts_common=(
	'-b[Alternate database location]:database_location:_files -/'
	'-h[Display syntax for the given operation]'
	'-r[Set alternate installation root]:installation root:_files -/'
	'-v[Be more verbose]'
	'--cachedir[Alternate package cache location]:cache_location:_files -/'
	'--config[An alternate configuration file]:config file:_files'
	'--logfile[An alternate log file]:config file:_files'
	'--noconfirm[Do not ask for confirmation]'
	'--noprogressbar[Do not show a progress bar when downloading files]'
	'--noscriptlet[Do not execute the install scriptlet if one exists]'
	'--print[Only print the targets instead of performing the operation]'
)

# options for passing to _arguments: options for --upgrade commands
_pacman_opts_pkgfile=(
	'-d[Skip dependency checks]'
	'--dbonly[Only remove database entry, do not remove files]'
	'--force[Overwrite conflicting files]'
	'--needed[Do not reinstall up to date packages]'
	'--recursive[Reinstall all dependencies of target packages]'
	'*:package file:_files -g "*.pkg.tar*(.)"'
)

# options for passing to _arguments: subactions for --query command
_pacman_opts_query_actions=(
	'-g[View all members of a package group]:*:package groups:->query_group'
	'-o[Query the package that owns a file]:file:_files'
	'-p[Package file to query]:*:package file:->query_file'
	'-s[Search package names and descriptions]:*:search text:->query_search'
)

# options for passing to _arguments: options for --query and subcommands
_pacman_opts_query_modifiers=(
	'-c[List package changelog]'
	'-d[List packages installed as dependencies]'
	'-e[List packages explicitly installed]'
	'-i[View package information]'
	'-ii[View package information including backup files]'
	'-k[Check package files]'
	'-l[List package contents]'
	'-m[List installed packages not found in sync db(s)]'
	'-t[List packages not required by any package]'
	'-u[List packages that can be upgraded]'
)

# options for passing to _arguments: options for --remove command
_pacman_opts_remove=(
	'-c[Remove all dependent packages]'
	'-d[Skip dependency checks]'
	'-n[Remove protected configuration files]'
	'-s[Remove dependencies not required by other packages]'
	'--dbonly[Only remove database entry, do not remove files]'
	'*:installed package:_pacman_completions_installed_packages'
)

# options for passing to _arguments: options for --sync command
_pacman_opts_sync_actions=(
	'*-c[Remove old packages from cache]:*:clean:->sync_clean'
	'*-cc[Remove all packages from cache]:*:clean:->sync_clean'
	'-g[View all members of a package group]:*:package groups:->sync_group'
	'-s[Search package names and descriptions]:*:search text:->sync_search'
	'--dbonly[Only remove database entry, do not remove files]'
	'--needed[Do not reinstall up to date packages]'
	'--recursive[Reinstall all dependencies of target packages]'
)

# options for passing to _arguments: options for --sync command
_pacman_opts_sync_modifiers=(
	'-d[Skip dependency checks]'
	'-i[View package information]'
	'-l[List all packages in a repository]'
	'-p[Print download URIs for each package to be installed]'
	'-u[Upgrade all out-of-date packages]'
	'-w[Download packages only]'
	'-y[Download fresh package databases]'
	'*--ignore[Ignore a package upgrade]:package:
		_pacman_completions_all_packages'
	'*--ignoregroup[Ignore a group upgrade]:package group:
		_pacman_completions_all_groups'
	'--asdeps[Install packages as non-explicitly installed]'
	'--asexplicit[Install packages as explicitly installed]'
	'--force[Overwrite conflicting files]'
)

# handles --help subcommand
_pacman_action_help() {
	_arguments -s : \
		"$_pacman_opts_commands[@]"
}

# handles cases where no subcommand has yet been given
_pacman_action_none() {
	_arguments -s : \
		"$_pacman_opts_commands[@]"
}

# handles --query subcommand
_pacman_action_query() {
	local context state line
	typeset -A opt_args

	_arguments -s : \
		"$_pacman_opts_common[@]" \
		"$_pacman_opts_query_actions[@]" \
		"$_pacman_opts_query_modifiers[@]"
	case $state in
		query_file)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_query_modifiers[@]" \
				'*:package file:_files -g "*.pkg.tar*"'
				;;
		query_group)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_query_modifiers[@]" \
				'*:groups:_pacman_completions_installed_groups'
				;;
		query_owner)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_query_modifiers[@]" \
				'*:file:_files'
				;;
		query_search)
			_arguments -s : \
				"$_pacman_opts_query_actions[@]" \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_query_modifiers[@]" \
				'*:search text: '
				;;
		*)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_query_actions[@]" \
				"$_pacman_opts_query_modifiers[@]" \
				'*:package:_pacman_completions_installed_packages'
				;;
	esac
}

# handles --remove subcommand
_pacman_action_remove() {
	_arguments -s : \
		"$_pacman_opts_common[@]" \
		"$_pacman_opts_remove[@]"
}

# handles --sync subcommand
_pacman_action_sync() {
	local context state line
	typeset -A opt_args

	_arguments -s : \
		"$_pacman_opts_common[@]" \
		"$_pacman_opts_sync_actions[@]" \
		"$_pacman_opts_sync_modifiers[@]"

	case $state in
		sync_clean)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_sync_modifiers[@]" \
				'*-c[Remove old packages from cache]' \
				;;
		sync_group)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_sync_modifiers[@]" \
				'*:package group:_pacman_completions_all_groups'
				;;
		sync_search)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_sync_modifiers[@]" \
				'*:search text: '
				;;
		*)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_sync_modifiers[@]" \
				'*:package:_pacman_completions_all_packages'
				;;
		esac
}

# handles --upgrade subcommand
_pacman_action_upgrade() {
	_arguments -s : \
		"$_pacman_opts_common[@]" \
		"$_pacman_opts_pkgfile[@]"
}

# handles --version subcommand
_pacman_action_version() {
	# no further arguments
	return 0
}

# provides completions for package groups
_pacman_completions_all_groups() {
	local -a cmd groups
	_pacman_get_command
	groups=( $(_call_program groups $cmd[@] -Sg) )
	typeset -U groups
	compadd "$@" -a groups
}

# provides completions for packages available from repositories
# these can be specified as either 'package' or 'repository/package'
_pacman_completions_all_packages() {
	local -a cmd packages repositories packages_long
	_pacman_get_command

	if compset -P1 '*/*'; then
		packages=( $(_call_program packages $cmd[@] -Sql ${words[CURRENT]%/*}) )
		typeset -U packages
		_wanted repo_packages expl "repository/package" compadd ${(@)packages}
	else
		packages=( $(_call_program packages $cmd[@] -Sql) )
		typeset -U packages
		_wanted packages expl "packages" compadd - "${(@)packages}"

		repositories=(${(o)${${${(M)${(f)"$(</etc/pacman.conf)"}:#\[*}/\[/}/\]/}:#options})
		typeset -U repositories
		_wanted repo_packages expl "repository/package" compadd -S "/" $repositories
	fi
}

# provides completions for package groups
_pacman_completions_installed_groups() {
	local -a cmd groups
	_pacman_get_command
	groups=(${(o)${(f)"$(_call_program groups $cmd[@] -Qg)"}% *})
	typeset -U groups
	compadd "$@" -a groups
}

# provides completions for installed packages
_pacman_completions_installed_packages() {
	local -a cmd packages packages_long
	packages_long=(/var/lib/pacman/local/*(/))
	packages=( ${${packages_long#/var/lib/pacman/local/}%-*-*} )
	compadd "$@" -a packages
}

# provides completions for repository names
_pacman_completions_repositories() {
	local -a cmd repositories
	repositories=(${(o)${${${(M)${(f)"$(</etc/pacman.conf)"}:#\[*}/\[/}/\]/}:#options})
	# Uniq the array
	typeset -U repositories
	compadd "$@" -a repositories
}

# builds command for invoking pacman in a _call_program command - extracts
# relevant options already specified (config file, etc)
# $cmd must be declared by calling function
_pacman_get_command() {
	# this is mostly nicked from _perforce
	cmd=( "pacman" "2>/dev/null")
	integer i
	for (( i = 2; i < CURRENT - 1; i++ )); do
		if [[ ${words[i]} = "--config" || ${words[i]} = "--root" ]]; then
			cmd+=( ${words[i,i+1]} )
		fi
	done
}

_sync_shortopts=(
    '-S[sync command]'
    '-b[set an alternate database location]:files:_files -/'
    '*-c[remove old packages from cache directory (-cc for all)]'
    '-d[skip dependency version checks (-dd to skip all checks)]'
    '-g[view all members of a package group]'
    '*-i[view package information]'
    '-l[view a list of packages in a repo]:package repo:_pacman_completions_repositories'
    '-p[print the targets instead of performing the operation]'
    '-q[show less information for query and search]'
    '-r[set an alternate installation root]:files:_files -/'
    '-s[search remote repositories for matching strings]:regex:'
    '-u[upgrade installed packages (-uu allows downgrade)]'
    '-v[be verbose]'
    '-w[download packages but do not install/upgrade anything]'
    '*-y[download fresh package databases from the server]'
)

_query_shortopts=(
    '-Q[query command]'
    '-b[an alternate database location]:files:_files -/'
    '-c[view the changelog of a package]'
    '-d[list packages installed as dependencies]'
    '-e[list packages explicitly installed]'
    '-g[view all members of a package group]:groups:_pacman_completions_installed_groups'
    '*-i[view package information (-ii for backup files)]'
    '-k[check that the files owned by the package(s) are present]'
    '-l[list the contents of the queried package]'
    '-m[list installed packages not found in sync db(s)]'
    '-n[list installed packages only found in sync db(s)]'
    '-o[query the package that own <file>]:package file:_files'
    '-p[query a package file instead of the database]:package file:_files -g "*.pkg.tar*"'
    '-q[show less information for query and search]'
    '-r[set an alternate installation root]:directories:_files -/'
    '-s[search locally-installed packages for matching strings]:regex:'
    '-t[list packages not required by any package]'
    '-u[list outdated packages]'
    '-v[be verbose]'
    )


_pacman_maincomp(){
	case $1 in
		-Q*g) # ipkg groups
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_query_modifiers[@]" \
				'*:groups:_pacman_completions_installed_groups'
				;;
		-Q*o) # file
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_query_modifiers[@]" \
				'*:package file:_files'
				;;
		-Q*p) # file *.pkg.tar*
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_query_modifiers[@]" \
				'*:package file:_files -g "*.pkg.tar*"'
				;;
		-Q*b|-Q*r)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_query_modifiers[@]" \
				'2:directories:_files -/' \
				'*:query:_pacman_action_query'
      ;;
		-Q*s)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_query_modifiers[@]" \
				'2:regex:'
			;;
		-Q*)
			_pacman_action_query	;;
		-R*)
			_pacman_action_remove   ;;
		-S*c*) # no completion
			return 0
			;;
		-S*l) # repos
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_sync_modifiers[@]" \
				'*:package repo:_pacman_completions_repositories'
				;;
		-S*g) # pkg groups
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_sync_modifiers[@]" \
				'*:package group:_pacman_completions_all_groups'
			;;
		-S*b|-S*r)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_sync_modifiers[@]" \
				'2:directories:_files -/' \
				'*:sync:_pacman_action_sync'
			;;
		-S*s)
			_arguments -s : \
				"$_pacman_opts_common[@]" \
				"$_pacman_opts_sync_modifiers[@]" \
				'2:regex:'
			;;
		-S*)
			_pacman_action_sync	;;
		-U*)
			_pacman_action_upgrade	;;
		-V*)
			_pacman_action_version	;;
		-h*)
			_pacman_action_help	;;
		-  )
			_pacman_action_none	;;
		*  )
			return 1	;;
	esac
}
_pacman_zsh_comp() {
    varcur="${(M)#words:#-*}"
    if (( varcur == 1 )) && (( CURRENT < 3 )); then
        case ${(M)words:#-*} in
            -S*) _arguments -w "$_sync_shortopts[@]" ;;
            -Q*) _arguments -w "$_query_shortopts[@]" ;;
        esac
    else
        if _pacman_maincomp ${${(M)words:#-*}[-1]} ; then
            _pacman_maincomp $words[2]
        fi
    fi
}

_key_shortopts=(
    '-h[show help]' \
    '-a[Add the specified keys (empty for stdin)]: :_files'
    '-d[Remove the Specified keyids]:*: :_keys'
    '-e[Export the specified or all keyids]:*: :_keys'
    '-f[List fingreprint for specidied or all keyids]:*: :_keys'
    '-l[List the specified or all keys]:*: :_keys'
    '-r[Fetch the specified keyids]:*: :_keys'
    '-u[Update the trustdb of pacman]'
    '-v[Verify the file specified by the signature]: :_files -g "*.sig"'
    '-V[Show program version]'
    )

_key_longopts=(
    '--help[show help]'
    '--add[Add the specified keys (empty for stdin)]: :_files'
    '--delete[Remove the Specified keyids]:*: :_keys'
    '--export[Export the specified or all keyids]:*: :_keys'
    '--finger[List fingreprint for specidied or all keyids]:*: :_keys'
    '--list-keys[List the specified or all keys]:*: :_keys'
    '--recv-keys[Fetch the specified keyids]:*: :_keys'
    '--updatedb[Update the trustdb of pacman]'
    '--verify[Verify the file specified by the signature]: :_files -g "*.sig"'
    '--version[Show program version]'
    '--edit-key[Present a menu for key management task on keyids]:*: :_keys'
    '--import[Imports pubring.gpg from dir(s)]: :_files -g "*.gpg"'
    '--import-tb[Imports ownertrust values from trustdb.gpg in dir(s)]: :_files -g "*.gpg"'
    '--init[Ensure the keyring is properly initialized]'
    '--list-sigs[List keys and their signatures]:*: :_keys'
    '--lsign-key[Locally sign the specified keyid]:*: :_keys'
    '--populate[Reload the default keys from the (given) keyrings in '/usr/share/pacman/keyrings']: :_path_files -W /usr/share/pacman/keyrings'
    '--refresh-keys[Update specified or all keys from a keyserver]:*: :_keys'
    )

_pacman_key_options=(
  '--config[Use an alternate config file (instead of /etc/pacman.con)]: :_files'
  '--gpgdir[Set an alternate directory for GnuPG (instead of /etc/pacman.d/gnupg)]: :_files -/'
  '--keyserver[Specify a keyserver to use if necessary]'
  )

_pacman_key() {
  case $words[CURRENT] in
    --*)
      _arguments -s : \
        "$_pacman_key_options[@]" \
        "$_key_longopts[@]"
      ;;
    -*)
      _arguments -s : \
        "$_pacman_key_options[@]" \
        "$_key_shortopts[@]" \
        "$_key_longopts[@]"
      ;;
    *)
      i=$#;
      while [[ $words[$i] != -* ]] && [[ $words[$i] != "pacman-key" ]];do
        i=$(($i-1))
      done
      case $i in
        --*)
        _arguments -s : \
          "$_pacman_key_options[@]" \
          "$_key_longopts[@]"
        ;;
      -*)
        _arguments -s : \
          "$_pacman_key_options[@]" \
          "$_key_shortopts[@]" \
          "$_key_longopts[@]"
        ;;
      *) return 1;;
    esac
    ;;
  esac
}

_keys() {
  local keylist keys
  keylist=$(pacman-key --list-keys 2>/dev/null | awk '
      $1 == "pub" {
        # key id
        split($2, a, "/"); print a[2]
      }
      $1 == "uid" {
        # email
        if (match($NF, /<[^>]+>/))
          print substr($NF, RSTART + 1, RLENGTH - 2)
      #this adds support for names as well if that is ever added
        }
      $1 == "uid" {
      for (i=2;i<NF;i++) {printf "%s%s",sep, $i;sep=" "}; printf "\n"
      }' |sed -e 's/(.*)//g' -e 's/^\ //g' -e 's/\ *$//g' |uniq
        )
        keys=(${(s:/:)${keylist//$'\n'/\/}})
  _describe -t modules 'keys in keyring' keys && return 0
}

_makepkg_shortopts=(
    '*-s[Install missing dependencies with pacman]'
    '*-i[Install package after successful build]'
    '*-A[Ignore incomplete arch field in PKGBUILD]'
    '*-c[Clean up work files after build]'
    '*-d[Skip all dependency checks]'
    '*-e[Do not extract source files (use existing src/ dir)]'
    '*-f[Overwrite existing package]'
    '*-g[Generate integrity checks for source files]'
    '*-h[Show help message and exit]'
    '*-L[Log package build process]'
    '*-m[Disable colorized output messages]'
    '*-o[Download and extract files only]'
    '-p[Use an alternate build script (instead of 'PKGBUILD')]: :_files'
    '*-r[Remove installed dependencies after a successful build]'
    '*-R[Repackage contents of the package without rebuilding]'
    '*-S[Generate a source-only tarball without downloading sources]'
    )

_makepkg_action_none(){
  _arguments \
		"$_makepkg_shortopts[@]"\
    "$_makepkg_longopts[@]"
}
_makepkg_longopts=(
  '--ignorearch[Ignore incomplete arch field in PKGBUILD]'
  '--clean[Clean up work files after build]'
  '--nodeps[Skip all dependency checks]'
  '--noextract[Do not extract source files (use existing src/ dir)]'
  '--force[Overwrite existing package]'
  '--geninteg[Generate integrity checks for source files]'
  '--help[Show help message and exit]'
  '--install[Install package after successful build]'
  '--log[Log package build process]'
  '--nocolor[Disable colorized output messages]'
  '--nobuild[Download and extract files only]'
  '--rmdeps[Remove installed dependencies after a successful build]'
  '--repackage[Repackage contents of the package without rebuilding]'
  '--syncdeps[Install missing dependencies with pacman]'
  '--source[Generate a source-only tarball without downloading sources]'
  '--allsource[Generate a source-only tarball including downloaded source]'
  '--asroot[Allow makepkg to run as root user]'
  '--check[Run check() function in the PKGBUILD]'
  '--config[Use an alternate config file instead of '/etc/makepkg.conf']: :_files'
  '--holdver[Prevent automatic version bumping for development PKGBUILDs]'
  '--key[Specify key to use for gpg signing instead of the default]: :_keys'
  '--nocheck[Do not run the check() function in the PKGBUILD]'
  '--nosign[Do not create a signature for the package]'
  '--pkg[Only build listed packages from a split package]'
  '--sign[Sign the resulting package with gpg]'
  '--skipchecksums[Do not verify checksums of the source files]'
  '--skipinteg[do not perform any verification checks on source files]'
  '--skippgpcheck[Do not verify source files with PGP signatures]'
  '--noconfirm[do not ask for confirmation when resolving dependencies]'
  '--asdeps[Install packages as non-explicitly installed]'
  '--noprogressbar[Do not show a progress bar when downloading files]'
  )
_makepkg(){
    case $words[CURRENT] in
      -*)
        _arguments -s -w : \
          "$_makepkg_shortopts[@]" \
          "$_makepkg_longopts[@]"
        ;;
      --* )
        _arguments -s \
          "$_makepkg_longopts[@]"
        ;;
      - )_makepkg_action_none ;;
      * )
        i=$#
        while [[ $words[i] != -* ]] && [[ $words[$i] != "makepkg" ]];do
          i=$((i-1));
        done
        case $words[$i] in
          -*)
            _arguments -s -w : \
              "$_makepkg_shortopts[@]" \
              "$_makepkg_longopts[@]"
            ;;
          --* )
            _arguments -s \
              "$_makepkg_longopts[@]"
            ;;
          - )_makepkg_action_none ;;
          * ) return 1 ;;
        esac
      ;;
    esac
}
_pacman_comp() {
  case "$service" in
    makepkg)
      _makepkg "$@";;
    pacman-key)
      _pacman_key "$@";;
    pacman)
      _pacman_zsh_comp "$@";;
    *)
      _message "Error";;
  esac
}

_pacman_comp "$@"

# vim: set ft=zsh ts=2 sw=2 sts=2 noet:
